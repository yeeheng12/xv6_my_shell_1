#include "kernel/types.h"
#include "user/user.h"
#include "kernel/fcntl.h"

int getcmd(char *buf, int nbuf) {
  
  printf(">>> " );
  memset(buf, 0, nbuf);
  gets(buf, nbuf);

  //remove newline character from the input buffer buf
  int len = strlen(buf);
  if (len > 0 && buf[len - 1] == '\n') {
    buf[len - 1] = '\0';
  }
  
  // check if the user typed "exit"
  if (strcmp(buf, "exit") == 0) {
    return -1;  
  }

  return 0;
}

__attribute__((noreturn))
void run_command(char *buf, int nbuf, int *pcp) {
  
  /* Useful data structures and flags. */
  char *commands[5][10];
  int numargs = 0; 
  int numcommands = 0; // a counter to keep track of the number of commands parsed
  
  /* Word start/end */
  int ws = 0; 
  int we = 0; 
  int wf = 0; //flag that indicates the start of a word or argument in the input command. this is added to show if we are in a argument

  /* flags to detect if the command involves input (<) or output (>) redirection */
  int redirection_left = 0;
  int redirection_right = 0;

  /* hold the file names for input/output redirection */
  char *file_name_l = 0;
  char *file_name_r = 0;
  
  // changed to 2d array to store multiple pipes
  int p[10][2]; 
  int pipe_count = 0;  
  int pipe_cmd = 0; 
  int sequence_cmd = 0; 

  int i = 0;

    for (; i < nbuf; i++) {

        if (buf[i] != '|') {
        
            if (buf[i] == '>') redirection_right = 1;
        
            if (buf[i] == '<') redirection_left = 1;
        
            if (buf[i] == ';') {
                sequence_cmd = 1;
                buf[i] = '\0';
                numcommands++;                     
                numargs = 0;
            }
        
            if (buf[i] != ' ' && !wf) { 
                wf = 1;
                ws = i;
                if (numargs < 10) commands[numcommands][numargs++] = &buf[ws]; 
            }
        
            if (buf[i] == ' ' && wf) {
                buf[i] = '\0';
                wf = 0;
            }

            if (buf[i] == ' ' && !wf) {
                buf[i] = '\0';
            }

        
            if (!(redirection_left || redirection_right)) {

                if (buf[i] != ' ' && wf) we = i; 

            } else {

                buf[i] = '\0';                                 
                i++;                                           
                while (buf[i] == ' ') i++;                     
                if (redirection_left) file_name_l = &buf[i];
                if (redirection_right) file_name_r = &buf[i];
                while (i < nbuf && buf[i] != ' ') i++;         
                buf[i] = '\0';

            }
    
        } else {

            pipe_cmd = 1;
            buf[i] = '\0';
            pipe_count++; 
            numcommands++;                     
            numargs = 0; //initialise num of arguments in command

        }
    }
    
    if (wf && numargs < 10) {
        buf[we + 1] = '\0';  
        wf = 0;
    }
    
    commands[numcommands][numargs] = 0;

    // Debugging: print the contents of the buffer after parsing
    printf("Debugging: Buffer content after parsing:\n");
    for (int j = 0; j < nbuf; j++) {
        if (buf[j] == '\0') {
            printf("buf[%d]: '\\0'\n", j);  // Print null terminators explicitly
        } else if (buf[j] == ' ') {
            printf("buf[%d]: ' '\n", j);    // Print spaces explicitly
        } else {
            printf("buf[%d]: '%c'\n", j, buf[j]);
        }
    }

    // Debugging: print the parsed commands and arguments
    printf("Debugging: Parsed commands and arguments:\n");
    for (int cmd = 0; cmd <= numcommands; cmd++) {
        printf("Command %d:\n", cmd);
        for (int arg = 0; commands[cmd][arg] != 0; arg++) {
            printf("  Arg %d: %s\n", arg, commands[cmd][arg]);
        }
    }
    
    if (sequence_cmd) {
        sequence_cmd = 0;
        if (fork() != 0) {
            wait(0);
            for (int c = 0; c <= numcommands; c++) {
                if (fork() == 0) {
                    exec(commands[c][0], commands[c]);
                    printf("exec %s failed\n", commands[c][0]);
                    exit(1);
                }
                wait(0);
            }
        exit(0);
        }
    }
  
  
    if (redirection_left) {
        int fd = open(file_name_l, O_RDONLY);
        if (fd < 0) {
            fprintf(2, "Error: Cannot open file %s for reading\n", file_name_l);
            exit(1); // exit on redirection failure
        }
        close(0);   

        if (dup(fd) < 0) {  
            fprintf(2, "Error: Failed to duplicate file descriptor\n");
            exit(1);
        }
        close(fd);  //avoid resource leak
    }

    if (redirection_right) {
        int fd = open(file_name_r, O_WRONLY | O_CREATE | O_TRUNC); 
        if (fd < 0) {
            fprintf(2, "Error: Cannot open file %s for writing\n", file_name_r);
            exit(1); 
        }
        close(1);   

        if (dup(fd) < 0) {  
            fprintf(2, "Error: Failed to duplicate file descriptor\n");
            exit(1);
        }
        close(fd);  //avoid resource leak
    }

  
    if (strcmp(commands[0][0], "cd") == 0) {
    // if directory not found or change of directory fails
        if (commands[0][1] == 0) {
            fprintf(2, "cd: missing directory argument\n");
        } else if (chdir(commands[0][1]) < 0) {
            fprintf(2, "cd: failed to change directory to %s\n", commands[0][1]);
        } else {
            write(pcp[1], commands[0][1], strlen(commands[0][1]) + 1);  // +1 to include "\0"
        }
        exit(2);
    
    } else {
    
        if (pipe_cmd) {

            int j = 0;
            for (; j < numcommands; j++) {
                pipe(p[j]);  
                if (fork() == 0) {

                    if (j > 0) {  // if not the first command, read from the previous pipe
                        close(0);
                        dup(p[j - 1][0]);
                        close(p[j - 1][0]);
                    }

                    if (j < numcommands - 1) {  // if not the last command, write to the next pipe
                        close(1);
                        dup(p[j][1]);
                        close(p[j][1]);
                    }

                    for (int k = 0; k < numcommands; k++) {
                        close(p[k][0]);
                        close(p[k][1]);
                    }

                    exec(commands[j][0], commands[j]);
                    printf("exec %s failed\n", commands[j][0]);
                    exit(1);
                }
            }

            // parent process close all pipes
            for (int k = 0; k < numcommands - 1; k++) {
                close(p[k][0]);
                close(p[k][1]);
            }

            // wait for all child processes to finish
            for (int l = 0; l < numcommands; l++) {
                wait(0);
            }           
            
        } else {     

        exec(commands[0][0], commands[0]);
        printf("exec %s failed\n", commands[0][0]);
        } 

    }
    exit(0);
}

int main(void) {

  static char buf[100];

  int pcp[2];
  pipe(pcp);

  while(getcmd(buf, sizeof(buf)) >= 0) {
    if(fork() == 0)
      run_command(buf, 100, pcp);
    
    int child_status;
    wait(&child_status);
    
    if (child_status == 2) {  
      char path[100];
      if(read(pcp[0], path, sizeof(path)) < 0){
        printf("Failed to read from pipe\n");
      } else {
        path[strlen(path)] = 0;
        chdir(path);
      } 
    }
  }
  printf("Exiting shell...\n");
  exit(0);
}
